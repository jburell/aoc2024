#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

#r "nuget: FSharpplus" 
#r "nuget: FParsec"
open FSharpPlus
open FParsec

#!fsharp

// Extract the values from the text

let numberPair: Parser<int32 * int32, unit> = tuple2 (pint32 .>> spaces) (spaces >>. pint32)
let emptyLine: Parser<unit, unit> = spaces >>. skipNewline
let skipEmptyLines: Parser<unit, unit> = many emptyLine >>% ()
let linesParser: Parser<(int * int) list, unit> = many (skipEmptyLines >>. numberPair .>> optional skipNewline)

let extract runner = 
  match (runner linesParser) with
  | Success(value, _, _) -> value
  | Failure(err, _, _) -> err |> exn |> raise

#!fsharp

// Calculate the answer

let calcPart1 data = 
  data  
  |> List.unzip
  |> fun (x, y) -> (List.sort x) |> List.zip (List.sort y)
  |> Seq.fold (fun (acc: (int)) pair -> 
      acc + abs((snd pair) - (fst pair))
    ) 0

let countOccurrences target list =
    list
    |> List.filter (fun x -> x = target)
    |> List.length

let calcPart2 data = 
  data  
  |> List.unzip
  |> fun (x, y) -> x |> Seq.map (fun a -> (a, countOccurrences a y))
  |> Seq.fold (fun acc pair -> 
      acc + ((fst pair) * (snd pair))
    ) 0


let calculateAnswer runner calc = 
  extract runner |> calc

#!fsharp

// Example data and string runner

let inputExample = @"3   4
4   3
2   5
1   3
3   9
3   3"

let stringRunner s parser = runParserOnString parser () "" s

#!fsharp

// Example proof #1
let exampleExpected = 11
let exampleActual = calculateAnswer (stringRunner inputExample) calcPart1
printfn "Example #1: expexted: %d, actual: %d" exampleExpected exampleActual

#!fsharp

// Example proof #2
let exampleExpected = 31
let exampleActual = calculateAnswer (stringRunner inputExample) calcPart2
printfn "Example #2: expexted: %d, actual: %d" exampleExpected exampleActual

#!fsharp

// Calculate the exercises

let fileRunner filename parser = runParserOnFile parser () filename Encoding.ASCII

let part1Actual: int = calculateAnswer (fileRunner "data/input1a.txt") calcPart1
printfn "Part 1: %d" part1Actual

let part2Actual: int = calculateAnswer (fileRunner "data/input1b.txt") calcPart2
printfn "Part 2: %d" part2Actual
