#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

#r "nuget: FSharpplus" 

#!fsharp

let numbers = [|"0"; "1"; "2"; "3"; "4"; "5"; "6"; "7"; "8"; "9"|]
let numbersAndSpelledOut = [
  "0";
  "zero";
  "1"; 
  "one"
  "2"; 
  "two"
  "3";
  "three" 
  "4"; 
  "four"
  "5"; 
  "five"
  "6"; 
  "six"
  "7";
  "seven" 
  "8"; 
  "eight"
  "9";
  "nine"
]

let reduceToElem predicate (a: (int option) seq) =
  Seq.reduce (fun acc item -> 
    match acc, item with
    | Some a, Some x -> if (predicate a x) then Some x else Some a
    | Some a, None -> Some a
    | None, Some x -> Some x
    | None, None -> None) a

let lowestIdx (number: string) (line: string): int option =
  line.IndexOf(number, 0, StringComparison.InvariantCultureIgnoreCase)
  |> fun idx -> if idx < 0 then None else Some idx

let findFirstAndLast (numberPatterns: string seq) (line: String): char option * char option = 
  let idxStart: int option = numberPatterns |> Seq.map (fun pattern -> lowestIdx pattern line) |> reduceToElem (fun a b -> if a > b then false else true)
  let idxEnd: int option = numberPatterns |> Seq.map (fun pattern -> lowestIdx pattern line) |> reduceToElem (fun a b -> if a < b then false else true)

  match (idxStart, idxEnd) with
  | Some x, Some y -> Some line[x], Some line[y]
  | Some x, None -> Some line[x], None
  | None, Some y -> None, Some line[y]
  | None, None -> None, None

#!fsharp

let convertToVal (item: char option * char option): int =
  printfn $"{item}"
  match item with
  | Some x, Some y -> Int32.Parse (x.ToString() + y.ToString())
  | Some x, None -> Int32.Parse (x.ToString() + x.ToString())
  | None, Some y -> Int32.Parse (y.ToString() + y.ToString())
  | None, None -> 0
  
let sumAll (lineVal: (char option * char option) seq): int =
  lineVal
  |> Seq.fold (fun acc item -> acc + (convertToVal item)) 0

#!fsharp

let inputExample = @"
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
"
let inputPart2 = @"
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
"

#!fsharp

let calcAnswer pattern (input: string) =
  input.Split("\n") 
  |> Seq.map (findFirstAndLast pattern)
  |> sumAll

let exampleAnswer = calcAnswer numbers inputExample

let part2Answer = calcAnswer numbersAndSpelledOut inputPart2

(exampleAnswer, part2Answer)
